from flask import Flask, request, jsonify
from github import Github
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/upload", methods=["POST"])
def upload():
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        app.logger.info(f"üì¶ Headers: {dict(request.headers)}")
        app.logger.info(f"üì¶ Raw body: {request.data}")

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–ª–∏ form-data
        try:
            data = request.get_json(force=True)
        except Exception:
            data = request.form.to_dict()

        app.logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω JSON –∏–ª–∏ Form: {data}")

        file_url = data.get("file_url")
        if not file_url:
            return jsonify({"error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_url –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"}), 400

        app.logger.info(f"üîó URL —Ñ–∞–π–ª–∞: {file_url}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if not file_url.endswith(".xmind"):
            return jsonify({"error": "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xmind"}), 400

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
        import requests
        response = requests.get(file_url)
        if response.status_code != 200:
            return jsonify({"error": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {response.status_code}"}), 400

        file_content = response.content
        filename = file_url.split("/")[-1]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub
        github_token = os.getenv("GITHUB_TOKEN")
        repo_name = os.getenv("GITHUB_REPO")
        branch = os.getenv("GITHUB_BRANCH", "main")
        target_path = os.getenv("GITHUB_TARGET_PATH", "matrix.xmind")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ GitHub
        g = Github(github_token)
        repo = g.get_repo(repo_name)
        current_file = repo.get_contents(target_path, ref=branch)

        repo.update_file(
            path=target_path,
            message=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {filename} —á–µ—Ä–µ–∑ Dify",
            content=file_content,
            sha=current_file.sha,
            branch=branch
        )

        return jsonify({"message": "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ GitHub"}), 200

    except Exception as e:
        app.logger.error(f"üî• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)