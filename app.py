from flask import Flask, request, jsonify
from github import Github
from dotenv import load_dotenv
import os
import requests

load_dotenv()
app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/upload", methods=["POST"])
def upload():
    try:
        # --- 1. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å JSON
        data = {}
        if request.is_json:
            data = request.get_json()
            app.logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω JSON: {data}")
        else:
            app.logger.info("‚ö†Ô∏è JSON –Ω–µ –ø–æ–ª—É—á–µ–Ω: content-type –Ω–µ application/json")

        file = request.files.get("file")
        file_url = data.get("file_url") if data else None

        if not file and file_url:
            # --- 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ
            app.logger.info(f"üîó URL —Ñ–∞–π–ª–∞: {file_url}")
            if not file_url.endswith(".xmind"):
                return jsonify({"error": "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xmind"}), 400

            r = requests.get(file_url)
            if r.status_code != 200:
                return jsonify({"error": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ. –ö–æ–¥: {r.status_code}"}), 400

            content = r.content
            filename = os.path.basename(file_url)
        elif file:
            filename = file.filename
            if not filename.endswith(".xmind"):
                return jsonify({"error": "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xmind"}), 400
            content = file.read()
        else:
            return jsonify({"error": "‚ùå –§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"}), 400

        # --- 3. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ GitHub
        github_token = os.getenv("GITHUB_TOKEN")
        repo_name = os.getenv("GITHUB_REPO")
        branch = os.getenv("GITHUB_BRANCH", "main")
        target_path = os.getenv("GITHUB_TARGET_PATH", "matrix.xmind")

        g = Github(github_token)
        repo = g.get_repo(repo_name)

        try:
            current_file = repo.get_contents(target_path, ref=branch)
            repo.update_file(
                path=target_path,
                message=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {filename} —á–µ—Ä–µ–∑ Dify",
                content=content,
                sha=current_file.sha,
                branch=branch
            )
        except Exception:
            repo.create_file(
                path=target_path,
                message=f"–ü–µ—Ä–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {filename} —á–µ—Ä–µ–∑ Dify",
                content=content,
                branch=branch
            )

        return jsonify({"message": "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ GitHub"}), 200

    except Exception as e:
        app.logger.error(f"üî• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)